[gd_scene load_steps=8 format=2]

[ext_resource path="res://textures/grass2.png" type="Texture" id=1]

[sub_resource type="QuadMesh" id=1]

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
function = 2

[sub_resource type="VisualShader" id=5]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorFunc:4
	vec3 n_out4p0 = -(n_out3p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out4p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -399, 103 )
nodes/fragment/0/position = Vector2( 560, 40 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 80, 60 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -380, 180 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -200, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 4, 0, 4, 0, 2, 0 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
use_in_baked_light = true
mesh = SubResource( 1 )
material/0 = SubResource( 6 )
